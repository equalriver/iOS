//
//  WLKTCourseDetailMapVC.m
//  wlkt
//
//  Created by nanbojiaoyu on 2017/8/24.
//  Copyright © 2017年 neimbo. All rights reserved.
//

#import "WLKTCourseDetailMapVC.h"
#import <MapKit/MapKit.h>
#import <CoreLocation/CoreLocation.h>

@interface PointAnnotation : NSObject<MKAnnotation>

@property (nonatomic) CLLocationCoordinate2D coordinate;
@property (nonatomic, copy) NSString *title;
@property (nonatomic, copy) NSString *subtitle;
//自定义一个图片属性在创建大头针视图时使用
@property (nonatomic,strong) UIImage *image;

@end
@implementation PointAnnotation

@end
/***********************************************************/
@interface CalloutAnnotation : NSObject<MKAnnotation>
@property (nonatomic) CLLocationCoordinate2D coordinate;
@property (nonatomic, copy) NSString *title;
@property (nonatomic, copy) NSString *subtitle;

@property (copy, nonatomic) NSString *locationName;
@end
@implementation CalloutAnnotation

@end
/***********************************************************/
@protocol CalloutAnnotationViewDelegate <NSObject>
- (void)calloutViewTapAction;

@end
@interface CalloutAnnotationView : MKAnnotationView

@property (strong, nonatomic) UIImageView *bgIV;
@property (strong, nonatomic) UILabel *titleLabel;
@property (strong, nonatomic) UILabel *subTitleLabel;
@property (strong, nonatomic) UIImageView *naviIV;
@property (weak, nonatomic) id<CalloutAnnotationViewDelegate> delegate;
@end

@implementation CalloutAnnotationView

- (instancetype)initWithAnnotation:(id<MKAnnotation>)annotation reuseIdentifier:(NSString *)reuseIdentifier{
    self = [super initWithAnnotation:annotation reuseIdentifier:reuseIdentifier];
    if (self) {
        self.bounds = CGRectMake(0, 0, 255, 95);
        self.canShowCallout = NO;
        self.userInteractionEnabled = YES;
        [self layoutUI];
        [self.bgIV addGestureRecognizer:[[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(calloutViewTapAct)]];
    }
    return self;
}

- (void)layoutUI{
    [self addSubview:self.bgIV];
    [self.bgIV addSubview:self.titleLabel];
    [self.bgIV addSubview:self.subTitleLabel];
    [self.bgIV addSubview:self.naviIV];
    [self makeConstraints];
    
}

- (void)calloutViewTapAct{
    if ([self.delegate respondsToSelector:@selector(calloutViewTapAction)]) {
        [self.delegate calloutViewTapAction];
    }
}
//set data
- (void)setAnnotation:(id<MKAnnotation>)annotation{
    [super setAnnotation:annotation];
    CalloutAnnotation *ann = (CalloutAnnotation *)annotation;
    //self.titleLabel.text = ann.locationName;
    [WLKTCourseDetailMapVC getAddressByLatitude:ann.coordinate.latitude longitude:ann.coordinate.longitude completion:^(NSString *address, NSError *error) {
        if (!error) {
            self.subTitleLabel.text = address;
            CGSize size = [UILabel getSizeWithStr:address Width:195 Font:14];
            [self.subTitleLabel mas_updateConstraints:^(MASConstraintMaker *make) {
                make.size.mas_equalTo(size);
            }];
        }
    }];
    
}
#pragma mark - makeConstraints
- (void)makeConstraints{
    [self.titleLabel mas_makeConstraints:^(MASConstraintMaker *make) {
        make.size.mas_equalTo(CGSizeMake(210, 20));
        make.left.mas_equalTo(self.bgIV).offset(10);
        make.top.mas_equalTo(self.bgIV).offset(10);
    }];
    [self.subTitleLabel mas_makeConstraints:^(MASConstraintMaker *make) {
        make.size.mas_equalTo(CGSizeMake(195, 17));
        make.left.mas_equalTo(self.bgIV).offset(10);
        make.top.mas_equalTo(self.titleLabel.mas_bottom).offset(8);
    }];
    [self.naviIV mas_makeConstraints:^(MASConstraintMaker *make) {
        make.size.mas_equalTo(CGSizeMake(55, 28));
        make.centerY.mas_equalTo(self.bgIV);
        make.right.mas_equalTo(self.bgIV.mas_right).offset(-5);
    }];
}
#pragma mark - get
- (UIImageView *)bgIV{
    if (!_bgIV) {
        _bgIV = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, 255, 95)];
        _bgIV.image = [UIImage imageNamed:@"课程详情底板"];
        _bgIV.userInteractionEnabled = YES;
    }
    return _bgIV;
}
- (UILabel *)titleLabel{
    if (!_titleLabel) {
        _titleLabel = [UILabel new];
        _titleLabel.font = [UIFont systemFontOfSize:15 weight:UIFontWeightSemibold];
        _titleLabel.textColor = UIColorHex(ffffff);
        _titleLabel.numberOfLines = 1;
    }
    return _titleLabel;
}
- (UILabel *)subTitleLabel{
    if (!_subTitleLabel) {
        _subTitleLabel = [UILabel new];
        _subTitleLabel.font = [UIFont systemFontOfSize:13];
        _subTitleLabel.textColor = UIColorHex(ffffff);
        _subTitleLabel.numberOfLines = 2;
    }
    return _subTitleLabel;
}
- (UIImageView *)naviIV{
    if (!_naviIV) {
        _naviIV = [[UIImageView alloc]initWithImage:[UIImage imageNamed:@"导航按钮"]];
    }
    return _naviIV;
}

@end
/***********************************************************/
@interface WLKTCourseDetailMapVC ()<CLLocationManagerDelegate, MKMapViewDelegate, CalloutAnnotationViewDelegate>
@property (strong, nonatomic) MKMapView *mapView;
/** 位置管理者 */
@property (nonatomic, strong) CLLocationManager *locationManager;
@property (strong, nonatomic) CLGeocoder *geocoder;

@property (nonatomic, assign) CLLocationCoordinate2D currentCoordinate;
@property (copy, nonatomic) NSString *location;
@property (copy, nonatomic) NSString *schoolName;
@property (strong, nonatomic) PointAnnotation *pointAnn;
@property (strong, nonatomic) CalloutAnnotation *calloutAnn;
@end

@implementation WLKTCourseDetailMapVC
- (instancetype)initWithLocation:(WLKTAddress *)location
{
    self = [super init];
    if (self) {
        _location = location.address;
        _schoolName = location.name;
    }
    return self;
}
- (instancetype)initWithAddress:(NSString *)address
{
    self = [super init];
    if (self) {
        _location = address;
    }
    return self;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor = [UIColor whiteColor];
    self.title = @"查看地图";
    [self.view addSubview:self.mapView];

    //启动跟踪定位
    [self.locationManager startUpdatingLocation];
    //添加大头针
    [self addAnnotationWithAddress:self.location];
    //[self.mapView setSelectedAnnotations:@[self.pointAnn]];
}

#pragma mark - CalloutAnnotationViewDelegate
- (void)calloutViewTapAction{
    [WLKTCourseDetailMapVC getAddressByLatitude:self.currentCoordinate.latitude longitude:self.currentCoordinate.longitude completion:^(NSString *address, NSError *error) {
        if (!error) {
            [self alertActionFrom:address to:self.location];
        }
    }];
}

#pragma mark - 添加大头针
-(void)addAnnotationWithAddress:(NSString *)address {
    //地理编码
    __block CLLocation *location;
    CLGeocoder *geocoder = [[CLGeocoder alloc]init];
    [geocoder geocodeAddressString:address completionHandler:^(NSArray *placemarks, NSError *error) {
        //取得第一个地标，地标中存储了详细的地址信息，注意：一个地名可能搜索出多个地址
        CLPlacemark *placemark = [placemarks firstObject];
        location = placemark.location;//位置
        
//        MKCoordinateRegion region = MKCoordinateRegionMake(location.coordinate, MKCoordinateSpanMake(0.1, 0.1));
//        MKCoordinateRegion adjustedRegion = [self.mapView regionThatFits:region];
//        [self.mapView setRegion:adjustedRegion animated:YES];
        
        //设定显示范围
        MKCoordinateSpan theSpan;
        theSpan.latitudeDelta = 0.1;
        theSpan.longitudeDelta = 0.1;
        //设置地图显示的中心及范围
        MKCoordinateRegion theRegion;
        theRegion.center = location.coordinate;
        theRegion.span = theSpan;
        [self.mapView setRegion:theRegion animated:YES];
        //设置大头针坐标
        self.pointAnn.coordinate = location.coordinate;
        [self.mapView addAnnotation:self.pointAnn];
        //详情视图
        self.calloutAnn.coordinate = location.coordinate;
        [self.mapView addAnnotation:self.calloutAnn];
        
        //[self.mapView setCenterCoordinate:location.coordinate animated:YES];
    }];
}

#pragma mark - map view
- (MKAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id<MKAnnotation>)annotation{
    if ([annotation isKindOfClass:[PointAnnotation class]]) {//大头针
        MKAnnotationView *annotationView = [mapView dequeueReusableAnnotationViewWithIdentifier:@"PinAnnotation"];
        if (annotationView == nil) {
            annotationView = [[MKAnnotationView alloc]initWithAnnotation:annotation reuseIdentifier:@"PinAnnotation"];
        }
        annotationView.annotation = annotation;
        annotationView.image = [UIImage imageNamed:@"课程详情学校定位"];
        annotationView.canShowCallout = NO;
        return annotationView;
    }
    else if ([annotation isKindOfClass:[CalloutAnnotation class]]){//弹出视图
        CalloutAnnotationView *v = (CalloutAnnotationView *)[mapView dequeueReusableAnnotationViewWithIdentifier:@"calloutAnnotation"];
        if (v == nil) {
            v = [[CalloutAnnotationView alloc]initWithAnnotation:annotation reuseIdentifier:@"calloutAnnotation"];
        }
        v.delegate = self;
        v.centerOffset = CGPointMake(4, -67);
        v.annotation = annotation;
        v.titleLabel.text = self.schoolName;
        return v;
    }

    return nil;//当前用户位置默认视图
}

#pragma mark - CoreLocation 代理
-(void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations{
    CLLocation *location = [locations firstObject];//取出第一个位置
    self.currentCoordinate = location.coordinate;//位置坐标
    MKCoordinateRegion region = MKCoordinateRegionMake(location.coordinate, MKCoordinateSpanMake(0.1, 0.1));//MKCoordinateRegionMakeWithDistance(location.coordinate, _span, _span);
    MKCoordinateRegion adjustedRegion = [self.mapView regionThatFits:region];
    [self.mapView setRegion:adjustedRegion animated:YES];
    //如果不需要实时定位，使用完即关闭定位服务
    [_locationManager stopUpdatingLocation];
}

#pragma mark - 根据地名确定地理坐标
+(void)getCoordinateByAddress:(NSString *)address completion:(void(^)(CLLocationCoordinate2D coordinate, NSError *error))completion{
    //地理编码
    CLGeocoder *geocoder = [[CLGeocoder alloc]init];
    [geocoder geocodeAddressString:address completionHandler:^(NSArray *placemarks, NSError *error) {
        //取得第一个地标，地标中存储了详细的地址信息，注意：一个地名可能搜索出多个地址
        CLPlacemark *placemark = [placemarks firstObject];
        completion(placemark.location.coordinate, error);//位置

    }];

}

#pragma mark  - 根据坐标取得地名
+(void)getAddressByLatitude:(CLLocationDegrees)latitude longitude:(CLLocationDegrees)longitude completion:(void(^)(NSString *address, NSError *error))completion{
    //反地理编码
    CLGeocoder *geocoder = [[CLGeocoder alloc]init];
    CLLocation *location = [[CLLocation alloc]initWithLatitude:latitude longitude:longitude];
    [geocoder reverseGeocodeLocation:location completionHandler:^(NSArray *placemarks, NSError *error) {
        CLPlacemark *placemark = [placemarks firstObject];
        NSString *address = [NSString stringWithFormat:@"%@", [placemark.description componentsSeparatedByString:@" "][1]];
        completion(address, error);
    }];
}

#pragma mark - 导航
//设置线路遮蔽物（红色线条）宽度，颜色:MKPolylineRenderer
- (MKOverlayRenderer *)mapView:(MKMapView *)mapView rendererForOverlay:(id <MKOverlay>)overlay{
    MKPolylineRenderer *ployline = [[MKPolylineRenderer alloc]initWithOverlay:overlay];
    ployline.fillColor = [UIColor blueColor];
    ployline.strokeColor = [UIColor blueColor];
    ployline.lineWidth = 8.0;
    return ployline;
}

- (void)getRouteWithBeginPL:(CLPlacemark *)beginPL endPL:(CLPlacemark *)endPL
{
    // 请求导航路线信息
    // 创建一个获取导航路线信息的请求
    MKDirectionsRequest *request = [[MKDirectionsRequest alloc] init];
    // 设置起点和终点
    CLPlacemark *sourceCLPL = beginPL;
    MKPlacemark *sourcePL = [[MKPlacemark alloc] initWithPlacemark:sourceCLPL];
    MKMapItem *sourceItem = [[MKMapItem alloc] initWithPlacemark:sourcePL];
    
    request.source = sourceItem;
    
    // 设置终点
    // 终点
    CLPlacemark *destCLPL = endPL;
    MKPlacemark *destPL = [[MKPlacemark alloc] initWithPlacemark:destCLPL];
    MKMapItem *destItem = [[MKMapItem alloc] initWithPlacemark:destPL];
    request.destination = destItem;
    //设置交通方式（有步行和机动车）
    request.transportType = MKDirectionsTransportTypeAny;
    request.requestsAlternateRoutes = YES;
    // 创建一个请求导航路线的对象
    MKDirections *directions = [[MKDirections alloc] initWithRequest:request];
    // 发起请求,获取导航路线
    [directions calculateDirectionsWithCompletionHandler:^(MKDirectionsResponse * _Nullable response, NSError * _Nullable error)
     {
         // 获取路线信息成功
         if (error == nil) {
             //提取导航中的一条线路 MKRoute
             MKRoute *route = [response.routes firstObject];
             //提取这条线路的每一步的信息
             NSArray *stepArray = route.steps;
             for (MKRouteStep *step in stepArray) {
                 PointAnnotation *annotation = [[PointAnnotation alloc]init];
                 annotation.coordinate = step.polyline.coordinate;
                 annotation.title = step.instructions;
                 annotation.subtitle = step.notice;
                 [self.mapView addAnnotation:annotation];
                 //将线路覆盖物添加到地图上
                 [self.mapView addOverlay:step.polyline];
             }
         }
     }];
}

-(void)turnByTurnFrom:(NSString *)current to:(NSString *)destination {
    //根据“  ”地理编码
    [self.geocoder geocodeAddressString:current completionHandler:^(NSArray *placemarks, NSError *error) {
        CLPlacemark *clPlacemark1 = [placemarks firstObject];//获取第一个地标
        MKPlacemark *mkPlacemark1 = [[MKPlacemark alloc]initWithPlacemark:clPlacemark1];
        //注意地理编码一次只能定位到一个位置，不能同时定位，所在放到第一个位置定位完成回调函数中再次定位
        [self.geocoder geocodeAddressString:destination completionHandler:^(NSArray *placemarks, NSError *error) {
            CLPlacemark *clPlacemark2 = [placemarks firstObject];//获取第一个地标
            MKPlacemark *mkPlacemark2 = [[MKPlacemark alloc]initWithPlacemark:clPlacemark2];
            NSDictionary *options = @{MKLaunchOptionsMapTypeKey:@(MKMapTypeStandard),MKLaunchOptionsDirectionsModeKey:MKLaunchOptionsDirectionsModeDriving};
            //MKMapItem *mapItem1=[MKMapItem mapItemForCurrentLocation];//当前位置
            MKMapItem *mapItem1 = [[MKMapItem alloc]initWithPlacemark:mkPlacemark1];
            MKMapItem *mapItem2 = [[MKMapItem alloc]initWithPlacemark:mkPlacemark2];
            [MKMapItem openMapsWithItems:@[mapItem1, mapItem2] launchOptions:options];
            
            //[self getRouteWithBeginPL:clPlacemark1 endPL:clPlacemark2];
            
        }];
    }];
}

- (void)alertActionFrom:(NSString *)current to:(NSString *)destination{
    UIAlertController *alert = [UIAlertController alertControllerWithTitle:nil message:nil preferredStyle:UIAlertControllerStyleActionSheet];
    //系统地图
    UIAlertAction *systemMap = [UIAlertAction actionWithTitle:@"苹果地图" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        [self turnByTurnFrom:current to:destination];
    }];
    [alert addAction:systemMap];
    //百度地图
    if ([[UIApplication sharedApplication] canOpenURL:[NSURL URLWithString:@"baidumap://"]]) {
        UIAlertAction *baiduMap = [UIAlertAction actionWithTitle:@"百度地图" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
            [WLKTCourseDetailMapVC getCoordinateByAddress:self.location completion:^(CLLocationCoordinate2D coordinate, NSError *error) {
                NSString *url = [[NSString stringWithFormat:@"baidumap://map/direction?origin={{我的位置}}&destination=latlng:%f,%f|name=目的地&mode=driving&coord_type=gcj02", coordinate.latitude, coordinate.longitude] stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLQueryAllowedCharacterSet]];
                [[UIApplication sharedApplication]openURL:[NSURL URLWithString:url]];
            }];
        }];
        [alert addAction:baiduMap];
    }
    UIAlertAction *cancel = [UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:nil];
    [alert addAction:cancel];
    [self presentViewController:alert animated:YES completion:nil];
}

#pragma mark - get
- (PointAnnotation *)pointAnn{
    if (!_pointAnn) {
        _pointAnn = [[PointAnnotation alloc]init];
    }
    return _pointAnn;
}
- (CalloutAnnotation *)calloutAnn{
    if (!_calloutAnn) {
        _calloutAnn = [[CalloutAnnotation alloc]init];
    }
    return _calloutAnn;
}
- (CLLocationManager *)locationManager
{
    if (!_locationManager) {
        _locationManager = [[CLLocationManager alloc] init];
        // 版本适配
        if ([[UIDevice currentDevice].systemVersion floatValue] >= 8.0) {
            [_locationManager requestWhenInUseAuthorization];
        }
        //设置代理
        _locationManager.delegate = self;
        //设置定位精度
        _locationManager.desiredAccuracy = kCLLocationAccuracyBest;
        //定位频率,每隔多少米定位一次
        _locationManager.distanceFilter = 10.0;//十米定位一次

    }
    return _locationManager;
}
- (MKMapView *)mapView{
    if (!_mapView) {
        _mapView = [[MKMapView alloc]initWithFrame:CGRectMake(0, 0, ScreenWidth, ScreenHeight - 64)];
        _mapView.mapType = MKMapTypeStandard;
        _mapView.delegate = self;
        _mapView.showsUserLocation = YES;
        // 指南针
        _mapView.showsCompass = YES;
        // 比例尺
        _mapView.showsScale = YES;
        // 交通
        _mapView.showsTraffic = YES;
        _mapView.userTrackingMode = MKUserTrackingModeFollowWithHeading;
        _mapView.rotateEnabled = NO;
    }
    return _mapView;
}
- (CLGeocoder *)geocoder{
    if (!_geocoder) {
        _geocoder = [[CLGeocoder alloc]init];
    }
    return _geocoder;
}

@end
