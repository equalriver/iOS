//
//  WLKTCDMoreEvaluationVC.m
//  wlkt
//
//  Created by nanbojiaoyu on 2018/3/20.
//  Copyright © 2018年 neimbo. All rights reserved.
//

#import "WLKTCDMoreEvaluationVC.h"
#import "WLKTCDBottomButtons.h"
#import "LGPhoto.h"
#import "WLKTCDMoreEvaluationCell.h"
#import "WLKTCDCommentApi.h"
#import "WLKTTableviewRefresh.h"
#import "WLKTCDPhoneAlert.h"
#import "WLKTOnlineServiceVC.h"
#import "WLKTCourseDetailListenApi.h"
#import "WLKTLogin.h"
#import "WLKTLoginCoordinator.h"
#import "WLKTCDPayAlertView.h"
#import "WLKTPolicyPhoneApi.h"

@interface WLKTCDMoreEvaluationVC ()<CDBottomButtonDelegate, UITableViewDelegate, UITableViewDataSource, LGPhotoPickerBrowserViewControllerDataSource, LGPhotoPickerBrowserViewControllerDelegate, CDMoreEvaluationPhotoDelegate, CDPhoneAlertDelegate, WLKTLoginCoordinatorDelegate>
@property (strong, nonatomic) UITableView *tableView;
@property (strong, nonatomic) WLKTCDBottomButtons *bottomBtns;
@property (strong, nonatomic) UIView *headerView;

@property (copy, nonatomic) NSString *courseId;
@property (assign, nonatomic) NSInteger page;
@property (nonatomic, assign) LGShowImageType showType;
@property (nonatomic, strong) NSMutableArray *LGPhotoPickerBrowserPhotoArray;
@property (copy, nonatomic) NSString *hpd;
@property (strong, nonatomic) NSMutableArray<WLKTCDCommentData *> *dataArr;
@property (strong, nonatomic) NSMutableArray *childCoordinator;
@property (copy, nonatomic) void (^loginBlock)(void);
@end

@implementation WLKTCDMoreEvaluationVC
- (instancetype)initWithCourseId:(NSString *)courseId
{
    self = [super init];
    if (self) {
        _courseId = courseId;
    }
    return self;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    [self.view addSubview:self.tableView];
    [self.view addSubview:self.bottomBtns];
    self.page = 1;
    [self setRefresh];
    [self loadData];
}

-(void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear:animated];
    
    if (IsIOS_11_Later) {
        
    }
    else{
        self.automaticallyAdjustsScrollViewInsets = NO;
    }
    [self.navigationController.navigationBar setBackgroundImage:[UIImage imageWithColor:[UIColor colorWithWhite:1.0 alpha:0.99]] forBarMetrics:UIBarMetricsDefault];
    [self.navigationController.navigationBar setShadowImage:[UIImage imageWithColor:[UIColor colorWithWhite:14/16.0 alpha:0.99]]];
    
}

- (void)viewWillDisappear:(BOOL)animated{
    [super viewWillDisappear:animated];
    
    self.navigationController.navigationBar.titleTextAttributes = @{NSForegroundColorAttributeName: KMainTextColor_3};
    [self.navigationController.navigationBar setBackgroundImage:[UIImage imageWithColor:kNavBarBackgroundColor] forBarMetrics:UIBarMetricsDefault];
    [self.navigationController.navigationBar setShadowImage:[UIImage imageWithColor:kNavBarShadowImageColor]];
    [self.navigationController setNavigationBarHidden:NO animated:NO];
    
}

- (void)loadData{
    self.tableView.state = WLKTViewStateLoading;
    WLKTCDCommentApi *api = [[WLKTCDCommentApi alloc]initWithCourseId:self.courseId page:self.page];
    [api startWithCompletionBlockWithSuccess:^(__kindof YTKBaseRequest *request) {
        self.tableView.state = WLKTViewStateNormal;
        [self.tableView.mj_header endRefreshing];
        
        self.hpd = [NSString stringWithFormat:@"%@", request.responseJSONObject[@"result"][@"hpd"]];
        NSArray *arr = [NSArray modelArrayWithClass:[WLKTCDCommentData class] json:request.responseJSONObject[@"result"][@"list"]];
        
        if (self.page == 1) {
            [self.dataArr removeAllObjects];
            if (!arr.count) {
                self.tableView.tableHeaderView = self.headerView;
            }
        }
        else{
            if (!arr.count) {
                [self.tableView.mj_footer endRefreshingWithNoMoreData];
            }
            else{
                [self.tableView.mj_footer endRefreshing];
            }
        }
        
        [self.dataArr addObjectsFromArray:arr];
        [self.tableView reloadData];
        
    } failure:^(__kindof YTKBaseRequest *request) {
        self.tableView.state = WLKTViewStateError;
        [self.tableView.mj_header endRefreshing];
        [self.tableView.mj_footer endRefreshing];
        WS(weakSelf);
        self.tableView.emptyButtonClickBlock = ^{
            [weakSelf loadData];
        };
    }];
}

- (void)setRefresh{
    WS(weakSelf);
    [WLKTTableviewRefresh tableviewRefreshHeaderWithTaget:self.tableView request:^{
        weakSelf.page = 1;
        [weakSelf loadData];
    }];
    
    [WLKTTableviewRefresh tableviewRefreshFooterWithTaget:self.tableView block:^{
        if (weakSelf.dataArr.count) {
            weakSelf.page++;
            [weakSelf loadData];
        }
        else{
            //            [weakSelf.tableView.mj_footer endRefreshing];
            weakSelf.tableView.mj_footer = nil;
        }
    }];
}

#pragma mark - table view
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    return self.dataArr.count;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    CGFloat h = 90 *ScreenRatio_6;
    
    h += [UILabel getSizeWithStr:self.dataArr[indexPath.row].content Width:315 *ScreenRatio_6 Font:16 *ScreenRatio_6].height;
    
    if (self.dataArr[indexPath.row].thumb_picture.count) {
        h += 70 *ScreenRatio_6;
    }
    
    if (self.dataArr[indexPath.row].reply.count) {
        h += 65 *ScreenRatio_6;
        h += [UILabel getSizeWithStr:self.dataArr[indexPath.row].reply.firstObject.content Width:290 *ScreenRatio_6 Font:16 *ScreenRatio_6].height;
    }
    return h;
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section{
    if (!self.dataArr.count) {
        return 0.01;
    }
    return 40;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    WLKTCDMoreEvaluationCell *cell = [tableView dequeueReusableCellWithIdentifier:@"WLKTCDMoreEvaluationCell"];
    if (!cell) {
        cell = [[WLKTCDMoreEvaluationCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"WLKTCDMoreEvaluationCell"];
    }
    cell.data = self.dataArr[indexPath.row];
    cell.delegate = self;
    cell.index = indexPath.row;
    cell.selectionStyle = UITableViewCellSelectionStyleNone;
    return cell;
}

- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section{
   
    UIView *v = [[UIView alloc]initWithFrame:CGRectMake(0, 0, ScreenWidth, 40)];
    v.backgroundColor = [UIColor whiteColor];
    
    UILabel *titleLabel = [UILabel new];
    titleLabel.font = [UIFont systemFontOfSize:14 *ScreenRatio_6];
    titleLabel.textColor = KMainTextColor_3;
    titleLabel.text = @"全部评价";
    [v addSubview:titleLabel];
    [titleLabel mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.height.mas_equalTo(v);
        make.left.mas_equalTo(v).offset(15 *ScreenRatio_6);
    }];
    
    UILabel *percent = [UILabel new];
    percent.font = [UIFont systemFontOfSize:14 *ScreenRatio_6];
    percent.textColor = kMainTextColor_red;
    percent.textAlignment = NSTextAlignmentRight;
    percent.text = self.hpd ? [NSString stringWithFormat:@"好评度%@", self.hpd] : @"";
    [v addSubview:percent];
    [percent mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerY.height.mas_equalTo(v);
        make.right.mas_equalTo(v).offset(-15 *ScreenRatio_6);
    }];
    
    return v;
}

#pragma mark - CDBottomButtonDelegate
- (void)CourseDetailBottomButtonDidSelectedButton:(UIButton *)button{
    
    if (button.tag == 0) {//隐私电话
        WLKTCDPhoneAlert *v = [[WLKTCDPhoneAlert alloc]initWithFrame:CGRectMake(0, 0, ScreenWidth, ScreenHeight)];
        v.delegate = self;
        [[UIApplication sharedApplication].keyWindow addSubview:v];
    }
    if (button.tag == 1) {//在线客服
        WLKTOnlineServiceVC *vc = [[WLKTOnlineServiceVC alloc]init];
        vc.url = self.data.courseinfo.kftokenjs;
        [self.navigationController pushViewController:vc animated:YES];
    }
    if (button.tag == 2) {//预约试听
        if (self.data.courseinfo.have_pg.intValue == 1) {//有拼购
            [self addPayCourseInfoViewWithArray:self.data.price_system];
        }
        else{
            [SVProgressHUD showProgress:-1 status:@"正在预约..."];
            WLKTCourseDetailListenApi *api = [[WLKTCourseDetailListenApi alloc]initWithSchoolId:self.data.schinfo.suid phone:@"" content:@""];
            [api startWithCompletionBlockWithSuccess:^(__kindof YTKBaseRequest *request) {
                NSString *code = [NSString stringWithFormat:@"%@", request.responseJSONObject[@"errorCode"]];
                if ([code isEqualToString:@"0"]) {
                    [SVProgressHUD showSuccessWithStatus:@"预约成功!"];
                }
                else{
                    [SVProgressHUD showErrorWithStatus:[NSString stringWithFormat:@"%@", request.responseJSONObject[@"message"]]];
                }
                
            } failure:^(__kindof YTKBaseRequest *request) {
                [SVProgressHUD showErrorWithStatus:@"预约失败，稍后再试"];
            }];
        }
        
    }
    if (button.tag == 3) {//立即购买
        
        if (!TheCurUser) {
            @weakify(self)
            [self loginWithComepletion:^ {
                @strongify(self)
                [self.navigationController dismissViewControllerAnimated:YES completion:nil];
                if (self.data.courseinfo.have_pg.intValue == 1) {//有拼购
                    [self addPayCourseInfoViewWithArray:self.data.pg_price_system];
                }
                else{
                    [self addPayCourseInfoViewWithArray:self.data.price_system];
                }
            }];
            
        } else {
            if (self.data.courseinfo.have_pg.intValue == 1) {//有拼购
                [self addPayCourseInfoViewWithArray:self.data.pg_price_system];
            }
            else{
                [self addPayCourseInfoViewWithArray:self.data.price_system];
            }
        }
    }
}

- (void)addPayCourseInfoViewWithArray:(NSArray *)array {
    WLKTCDPayAlertView *v = [[WLKTCDPayAlertView alloc]initWithFrame:CGRectMake(0, 0, ScreenWidth, ScreenHeight) target:self];
    [[UIApplication sharedApplication].keyWindow addSubview:v];
    v.courseData = self.data;
    v.data = array;
}

#pragma mark - 隐私电话 Delegate
- (void)didClickCall:(NSString *)number{
    WLKTPolicyPhoneApi *api = [[WLKTPolicyPhoneApi alloc]initWithType:WLKTPolicyPhoneTypeCourse typeId:self.data.courseinfo.cid phone:number];
    [api startWithCompletionBlockWithSuccess:^(__kindof YTKBaseRequest *request) {
        NSString *code = [NSString stringWithFormat:@"%@", request.responseJSONObject[@"errorCode"]];
        if ([code isEqualToString:@"0"]) {
            NSString* str = [NSString stringWithFormat:@"telprompt://%@", request.responseJSONObject[@"result"][@"phone"]];
            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:str]];
        }
        else{
            [SVProgressHUD showInfoWithStatus:request.responseJSONObject[@"message"]];
        }
        
    } failure:^(__kindof YTKBaseRequest *request) {
        
    }];
}

#pragma mark - CDMoreEvaluationPhotoDelegate
- (void)didSelectedPhotoItem:(NSIndexPath *)indexPath type:(LGShowImageType)type index:(NSInteger)index{
    [self prepareForPhotoBroswerWithImageArray:self.dataArr[index].picture];
    [self pushPhotoBroswerWithStyle:type seletedIndex:indexPath];
}

#pragma mark - LGPhotoPickerBrowserViewControllerDataSource
//给照片浏览器传image的时候先包装成LGPhotoPickerBrowserPhoto对象
- (void)prepareForPhotoBroswerWithImageArray:(NSArray *)imageArray {
    self.LGPhotoPickerBrowserPhotoArray = [[NSMutableArray alloc] init];
    for (int i = 0; i < imageArray.count; i++) {
        LGPhotoPickerBrowserPhoto *photo = [[LGPhotoPickerBrowserPhoto alloc] init];
        photo.photoURL = [NSURL URLWithString:imageArray[i]];
        [self.LGPhotoPickerBrowserPhotoArray addObject:photo];
    }
}
//初始化图片浏览器
- (void)pushPhotoBroswerWithStyle:(LGShowImageType)style seletedIndex:(NSIndexPath *)indexPath{
    LGPhotoPickerBrowserViewController *BroswerVC = [[LGPhotoPickerBrowserViewController alloc] init];
    BroswerVC.delegate = self;
    BroswerVC.dataSource = self;
    BroswerVC.showType = style;
    BroswerVC.currentIndexPath = indexPath;
    BroswerVC.modalTransitionStyle = UIModalTransitionStyleCrossDissolve;
    self.showType = style;
    [self presentViewController:BroswerVC animated:YES completion:nil];
}

- (NSInteger)photoBrowser:(LGPhotoPickerBrowserViewController *)photoBrowser numberOfItemsInSection:(NSUInteger)section{
    if (self.showType == LGShowImageTypeImageBroswer) {
        return self.LGPhotoPickerBrowserPhotoArray.count;
    } else {
        NSLog(@"非法数据源");
        return 0;
    }
}

- (id<LGPhotoPickerBrowserPhoto>)photoBrowser:(LGPhotoPickerBrowserViewController *)pickerBrowser photoAtIndexPath:(NSIndexPath *)indexPath{
    if (self.showType == LGShowImageTypeImageBroswer) {
        return [self.LGPhotoPickerBrowserPhotoArray objectAtIndex:indexPath.item];
    } else{
        NSLog(@"非法数据源");
        return nil;
    }
}

#pragma mark - LSGLoginCoordinatorDelegate
- (void)loginCoordinatorDidFinishLogin:(WLKTLoginCoordinator *)loginCoordinator {
    if (_loginBlock) {
        _loginBlock();
    }
    
    [_childCoordinator removeObject:loginCoordinator];
}

- (void)loginCoordinatorDidFinishLogin:(WLKTLoginCoordinator *)coordinator handler:(void (^)(UIViewController *))handler{
    if (_loginBlock) {
        _loginBlock();
        handler(self);
    }
    
    [_childCoordinator removeObject:coordinator];
}

- (void)loginCoordinatorDidRequestDismissal:(WLKTLoginCoordinator *)loginCoordinator {
    [self.navigationController dismissViewControllerAnimated:YES completion:^{
        [_childCoordinator removeObject:loginCoordinator];
    }];
}

- (void)loginWithComepletion:(void (^)(void))completion {
    WLKTLoginCoordinator *cr = [WLKTLoginCoordinator new];
    cr.delegate = self;
    [self.childCoordinator addObject:cr];
    self.loginBlock = completion;
    [self.navigationController presentViewController:cr.navigationController animated:YES completion:nil];
}

#pragma mark - get
-(UITableView *)tableView{
    if (!_tableView) {
        _tableView = [[UITableView alloc]initWithFrame:CGRectMake(0, NavigationBarAndStatusHeight, ScreenWidth, ScreenHeight - NavigationBarAndStatusHeight -50) style:UITableViewStylePlain];
        _tableView.dataSource = self;
        _tableView.delegate = self;
        _tableView.backgroundColor = kMainBackgroundColor;
        _tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
    }
    return _tableView;
}
- (UIView *)headerView{
    if (!_headerView) {
        _headerView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, ScreenWidth, ScreenHeight)];
        _headerView.backgroundColor = kMainBackgroundColor;
        UIImageView *iv = [[UIImageView alloc]initWithImage:[UIImage imageNamed:@"无课程"]];
        [_headerView addSubview:iv];
        [iv mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.mas_equalTo(_headerView);
            make.top.mas_equalTo(_headerView).offset(30 *ScreenRatio_6);
        }];
        UILabel *l = [UILabel new];
        l.font = [UIFont systemFontOfSize:14 *ScreenRatio_6];
        l.textColor = KMainTextColor_6;
        l.backgroundColor = kMainBackgroundColor;
        l.text = @"该课程暂无评价";
        l.textAlignment = NSTextAlignmentCenter;
        [_headerView addSubview:l];
        [l mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerX.mas_equalTo(_headerView);
            make.top.mas_equalTo(iv.mas_bottom).offset(20 *ScreenRatio_6);
        }];
    }
    return _headerView;
}
- (WLKTCDBottomButtons *)bottomBtns{
    if (!_bottomBtns) {
        _bottomBtns = [[WLKTCDBottomButtons alloc]initWithFrame:CGRectMake(0, ScreenHeight - 50, ScreenWidth, 50)];
        _bottomBtns.delegate = self;
    }
    return _bottomBtns;
}
- (NSMutableArray<WLKTCDCommentData *> *)dataArr{
    if (!_dataArr) {
        _dataArr = [NSMutableArray arrayWithCapacity:10];
    }
    return _dataArr;
}
- (NSMutableArray *)childCoordinator {
    if (!_childCoordinator) {
        _childCoordinator = [NSMutableArray array];
    }
    return _childCoordinator;
}
@end
