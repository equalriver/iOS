//
//  AppDelegate.m
//  wlkt
//
//  Created by slovelys on 17/3/19.
//  Copyright © 2017年 neimbo. All rights reserved.
//

#import "AppDelegate.h"
#import "WLKTLogin.h"
#import "WLKTUserController.h"
#import <AlipaySDK/AlipaySDK.h>
#import <UMSocialCore/UMSocialCore.h>
#import <QQ_XGPush/XGPush.h>
#import <QQ_XGPush/XGSetting.h>
#import "WLKTCourseDetailVC.h"
#import "WLKTNewsVideoDetailVC.h"
#import "WLKTIntroManager.h"
#import "WLKTAdvertisingView.h"

#import <AFNetworking.h>
#if __IPHONE_OS_VERSION_MAX_ALLOWED >= __IPHONE_10_0

#import <UserNotifications/UserNotifications.h>
@interface AppDelegate() <UNUserNotificationCenterDelegate>
@end
#endif

@implementation AppDelegate


- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    // Override point for customization after application launch.
    //[self QQPushSettingWithOptions:launchOptions];
    [WeiboSDK registerApp:kSinaAppKey];
    [application setMinimumBackgroundFetchInterval:UIApplicationBackgroundFetchIntervalMinimum];
    self.window = [[UIWindow alloc] initWithFrame:kMainScreen.bounds];
    self.appCoordinator = [[WLKTAppCoordinator alloc] initWithWindow:self.window options:launchOptions];
    [self.appCoordinator start];
    
    return YES;
}

#pragma mark - WeiboSDKDelegate
- (void)didReceiveWeiboRequest:(WBBaseRequest *)request
{
    
}

- (void)didReceiveWeiboResponse:(WBBaseResponse *)response
{
    NSLog(@"token %@", [(WBAuthorizeResponse *) response accessToken]);
    NSLog(@"uid %@", [(WBAuthorizeResponse *) response userID]);
    
    [self getWeiBoUserInfo:[(WBAuthorizeResponse *) response userID] token:[(WBAuthorizeResponse *) response accessToken]];
}

- (void)getWeiBoUserInfo:(NSString *)uid token:(NSString *)token
{
    NSString *url = [NSString stringWithFormat:@"https://api.weibo.com/2/users/show.json?uid=%@&access_token=%@&source=%@",uid,token,kSinaAppKey];
        //创建会话管理员
    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];
        //设置响应序列化 让响应格式统一
    manager.responseSerializer = [AFHTTPResponseSerializer serializer];
        //发出请求
    [manager GET:url parameters:nil progress:^(NSProgress * _Nonnull downloadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
        NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:responseObject options:kNilOptions error:nil];
        NSDictionary *paramter = @{@"idstr" : [dic valueForKeyPath:@"idstr"],
                                   @"screen_name" : [dic valueForKeyPath:@"screen_name"],
                                   @"avatar_hd":[dic valueForKeyPath:@"avatar_hd"]
                                   };
        if (self.weiboAuthoHandler) {
            self.weiboAuthoHandler(paramter);
        }

    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        
    }];
}

#pragma mark -
- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication
         annotation:(id)annotation {
    [WeiboSDK handleOpenURL:url delegate:self];
    [[UMSocialManager defaultManager] handleOpenURL:url sourceApplication:sourceApplication annotation:annotation];
    [self alipayWithopenURL:url];
    
    if ([url.absoluteString containsString:WLKT_SHARE_URL]) {
        NSString *shareId = [[url.absoluteString componentsSeparatedByString:@"?"].lastObject componentsSeparatedByString:@"="].lastObject;
        if ([shareId containsString:@"course"]) {
            WLKTCourseDetailVC *vc = [[WLKTCourseDetailVC alloc]initWithCourseId:shareId];
            UIViewController *tab = self.window.rootViewController.childViewControllers.firstObject;
            if ([tab isKindOfClass:[UINavigationController class]]) {
                [(UINavigationController *)tab pushViewController:vc animated:YES];
            }
        }
        if ([shareId containsString:@"news"]) {
            WLKTNewsVideoDetailVC *vc = [[WLKTNewsVideoDetailVC alloc]initWithNewsId:shareId];
            UIViewController *tab = self.window.rootViewController.childViewControllers.firstObject;
            if ([tab isKindOfClass:[UINavigationController class]]) {
                [(UINavigationController *)tab pushViewController:vc animated:YES];
            }
        }
    }
    return YES;
}

// NOTE: 9.0以后使用新API接口
- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<NSString*, id> *)options
{
    [WeiboSDK handleOpenURL:url delegate:self];
    BOOL UM = [[UMSocialManager defaultManager] handleOpenURL:url options:options];
    if (UM) {
        return UM;
    }
    if ([url.absoluteString containsString:WLKT_SHARE_URL]) {
        NSString *shareId = [[url.absoluteString componentsSeparatedByString:@"?"].lastObject componentsSeparatedByString:@"="].lastObject;
        if ([shareId containsString:@"course"]) {
            WLKTCourseDetailVC *vc = [[WLKTCourseDetailVC alloc]initWithCourseId:shareId];
            UIViewController *tab = self.window.rootViewController.childViewControllers.firstObject;
            if ([tab isKindOfClass:[UINavigationController class]]) {
                [(UINavigationController *)tab pushViewController:vc animated:YES];
            }
        }
        if ([shareId containsString:@"news"]) {
            WLKTNewsVideoDetailVC *vc = [[WLKTNewsVideoDetailVC alloc]initWithNewsId:shareId];
            UIViewController *tab = self.window.rootViewController.childViewControllers.firstObject;
            if ([tab isKindOfClass:[UINavigationController class]]) {
                [(UINavigationController *)tab pushViewController:vc animated:YES];
            }
        }
    }
    [self alipayWithopenURL:url];
    return YES;
}

- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url{
    [WeiboSDK handleOpenURL:url delegate:self];
    BOOL UM = [[UMSocialManager defaultManager] handleOpenURL:url];
    if (UM) {
        return UM;
    }
    if ([url.absoluteString containsString:WLKT_SHARE_URL]) {
        NSString *shareId = [[url.absoluteString componentsSeparatedByString:@"?"].lastObject componentsSeparatedByString:@"="].lastObject;
        if ([shareId containsString:@"course"]) {
            WLKTCourseDetailVC *vc = [[WLKTCourseDetailVC alloc]initWithCourseId:shareId];
            UIViewController *tab = self.window.rootViewController.childViewControllers.firstObject;
            if ([tab isKindOfClass:[UINavigationController class]]) {
                [(UINavigationController *)tab pushViewController:vc animated:YES];
            }
        }
        if ([shareId containsString:@"news"]) {
            WLKTNewsVideoDetailVC *vc = [[WLKTNewsVideoDetailVC alloc]initWithNewsId:shareId];
            UIViewController *tab = self.window.rootViewController.childViewControllers.firstObject;
            if ([tab isKindOfClass:[UINavigationController class]]) {
                [(UINavigationController *)tab pushViewController:vc animated:YES];
            }
        }
    }
    [self alipayWithopenURL:url];
    return YES;
}

- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken{
    NSString *deviceTokenStr = [XGPush registerDevice:deviceToken
                                              account:nil
                                      successCallback:^{
                                          NSLog(@"XGPush register push success");
                                      } errorCallback:^{
                                          NSLog(@"XGPush register push error");
                                      }];
    NSLog(@"XGPush device token is %@", deviceTokenStr);
    
}

- (void)applicationWillResignActive:(UIApplication *)application {
    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
    // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.
}


- (void)applicationDidEnterBackground:(UIApplication *)application {
    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
}


- (void)applicationWillEnterForeground:(UIApplication *)application {
    // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.
    if (![WLKTIntroManager needDisplayIntroView] && ![[NSUserDefaults standardUserDefaults] boolForKey:@"isSNSPush"]) {
        WLKTAdvertisingView *v = [[WLKTAdvertisingView alloc]init];
        [[UIApplication sharedApplication].keyWindow addSubview:v];
    }
}

- (void)applicationDidBecomeActive:(UIApplication *)application {
    
}

- (void)applicationWillTerminate:(UIApplication *)application {
    // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
}

- (void)QQPushSettingWithOptions:(NSDictionary *)launchOptions {
    //打开debug开关
    XGSetting *setting = [XGSetting getInstance];
    [setting enableDebug:YES];
    [XGPush startApp:QQ_PUSH_ID appKey:QQ_PUSH_KEY];
    [self registerAPNS];
    //推送效果统计
    [XGPush handleLaunching:launchOptions successCallback:^{
        NSLog(@"XGPush Handle launching success");
    } errorCallback:^{
        NSLog(@"XGPush Handle launching error");
    }];
}
- (void)registerAPNS {
    float sysVer = [[[UIDevice currentDevice] systemVersion] floatValue];
#if __IPHONE_OS_VERSION_MAX_ALLOWED >= __IPHONE_10_0
    if (sysVer >= 10) {
        // iOS 10
        [self registerPush10];
    } else if (sysVer >= 8) {
        // iOS 8-9
        [self registerPush8to9];
    } else {
        // before iOS 8
        //[self registerPushBefore8];
    }
#else
    if (sysVer < 8) {
        // before iOS 8
        //[self registerPushBefore8];
    } else {
        // iOS 8-9
        [self registerPush8to9];
    }
#endif
}

- (void)registerPush10{
#if __IPHONE_OS_VERSION_MAX_ALLOWED >= __IPHONE_10_0
    UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];
    center.delegate = self;
    
    
    [center requestAuthorizationWithOptions:UNAuthorizationOptionBadge | UNAuthorizationOptionSound | UNAuthorizationOptionAlert completionHandler:^(BOOL granted, NSError * _Nullable error) {
        if (granted) {
        }
    }];
    [[UIApplication sharedApplication] registerForRemoteNotifications];
#endif
}

- (void)registerPush8to9{
    UIUserNotificationType types = UIUserNotificationTypeBadge | UIUserNotificationTypeSound | UIUserNotificationTypeAlert;
    UIUserNotificationSettings *mySettings = [UIUserNotificationSettings settingsForTypes:types categories:nil];
    [[UIApplication sharedApplication] registerUserNotificationSettings:mySettings];
    [[UIApplication sharedApplication] registerForRemoteNotifications];
}

//- (void)registerPushBefore8{
//    [[UIApplication sharedApplication] registerForRemoteNotificationTypes:(UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound)];
//}

- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {
    NSLog(@"XGPush register APNS fail.\n XGPush reason : %@", error);
}


/**
 收到通知的回调
 
 @param application  UIApplication 实例
 @param userInfo 推送时指定的参数
 */
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {
    NSLog(@"XGPush receive Notification");
    [XGPush handleReceiveNotification:userInfo
                      successCallback:^{
                          NSLog(@"XGPush Handle receive success");
                      } errorCallback:^{
                          NSLog(@"XGPush Handle receive error");
                      }];
}


/**
 收到静默推送的回调
 
 @param application  UIApplication 实例
 @param userInfo 推送时指定的参数
 @param completionHandler 完成回调
 */
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {
    NSLog(@"XGPush receive slient Notification");
    NSLog(@"XGPush userinfo %@", userInfo);
    [XGPush handleReceiveNotification:userInfo
                      successCallback:^{
                          NSLog(@"XGPush Handle receive success");
                      } errorCallback:^{
                          NSLog(@"XGPush Handle receive error");
                      }];
    
    completionHandler(UIBackgroundFetchResultNewData);
}

// iOS 10 新增 API
// iOS 10 会走新 API, iOS 10 以前会走到老 API
#if __IPHONE_OS_VERSION_MAX_ALLOWED >= __IPHONE_10_0
// App 用户点击通知的回调
// 无论本地推送还是远程推送都会走这个回调
- (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler {
    NSLog(@"XGPush click notification");
    [XGPush handleReceiveNotification:response.notification.request.content.userInfo
                      successCallback:^{
                          NSLog(@"XGPush Handle receive success");
                      } errorCallback:^{
                          NSLog(@"XGPush Handle receive error");
                      }];
    
    completionHandler();
}

// App 在前台弹通知需要调用这个接口
- (void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions options))completionHandler {
    
    completionHandler(UNNotificationPresentationOptionBadge | UNNotificationPresentationOptionSound | UNNotificationPresentationOptionAlert);
}
#endif

- (void)alipayWithopenURL:(NSURL *)url {
    if ([url.host isEqualToString:@"safepay"]) {
        // 支付跳转支付宝钱包(app)进行支付，处理支付结果
        [[AlipaySDK defaultService] processOrderWithPaymentResult:url standbyCallback:^(NSDictionary *resultDic) {
            if (resultDic[@"resultStatus"]){
                
                if ([resultDic[@"resultStatus"] isEqualToString:@"9000"]) {//订单支付成功
                    dispatch_async(dispatch_get_main_queue(), ^{
                        [SVProgressHUD showSuccessWithStatus:@"订单支付成功"];
                        [[NSNotificationCenter defaultCenter]postNotification:[NSNotification notificationWithName:@"paySuccess" object:nil]];
                    });
                }
                else if ([resultDic[@"resultStatus"] isEqualToString:@"8000"] || [resultDic[@"resultStatus"] isEqualToString:@"6004"]) {//正在处理中
                    dispatch_async(dispatch_get_main_queue(), ^{
                        [SVProgressHUD showSuccessWithStatus:@"正在处理中..."];
                    });
                }
                else if ([resultDic[@"resultStatus"] isEqualToString:@"4000"]) {//订单支付失败
                    dispatch_async(dispatch_get_main_queue(), ^{
                        [SVProgressHUD showErrorWithStatus:@"订单支付失败"];
                        [[NSNotificationCenter defaultCenter]postNotification:[NSNotification notificationWithName:@"payFail" object:nil]];
                    });
                }
                else if ([resultDic[@"resultStatus"] isEqualToString:@"5000"]) {//重复请求
                    dispatch_async(dispatch_get_main_queue(), ^{
                        [SVProgressHUD showErrorWithStatus:@"重复请求"];
                        [[NSNotificationCenter defaultCenter]postNotification:[NSNotification notificationWithName:@"payFail" object:nil]];
                    });
                }
                else if ([resultDic[@"resultStatus"] isEqualToString:@"6001"]) {//用户中途取消
                    dispatch_async(dispatch_get_main_queue(), ^{
                        [SVProgressHUD showErrorWithStatus:@"取消支付"];
                        [[NSNotificationCenter defaultCenter]postNotification:[NSNotification notificationWithName:@"payFail" object:nil]];
                    });
                }
                else if ([resultDic[@"resultStatus"] isEqualToString:@"6002"]) {//网络连接出错
                    dispatch_async(dispatch_get_main_queue(), ^{
                        [SVProgressHUD showErrorWithStatus:@"网络连接出错"];
                        //[[NSNotificationCenter defaultCenter]postNotification:[NSNotification notificationWithName:@"payFail" object:nil]];
                    });
                }
                else{//其他错误
                    dispatch_async(dispatch_get_main_queue(), ^{
                        [SVProgressHUD showErrorWithStatus:@"其它支付错误"];
                        [[NSNotificationCenter defaultCenter]postNotification:[NSNotification notificationWithName:@"payFail" object:nil]];
                    });
                    
                }
            }
        }];
        
    }
}

@end
