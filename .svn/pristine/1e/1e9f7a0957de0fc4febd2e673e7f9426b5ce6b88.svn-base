//
//  WLKTCDMapViewController.m
//  wlkt
//
//  Created by nanbojiaoyu on 2018/4/12.
//  Copyright © 2018年 neimbo. All rights reserved.
//

#import "WLKTCDMapViewController.h"
#import <MapKit/MapKit.h>
#import <CoreLocation/CoreLocation.h>
#import "WLKTCDMapSchoolListCell.h"
#import "WLKTCourseDetailMapVC.h"
#import "WLKTCDVRPlayVC.h"
#import "WLKTExchangeButton.h"

@interface CDPointAnnotation : NSObject<MKAnnotation>

@property (nonatomic) CLLocationCoordinate2D coordinate;
@property (nonatomic, copy) NSString *title;
@property (nonatomic, copy) NSString *subtitle;
//自定义一个图片属性在创建大头针视图时使用
@property (nonatomic,strong) UIImage *image;

@end
@implementation CDPointAnnotation

@end
/***********************************************************/
@interface CDCalloutAnnotation : NSObject<MKAnnotation>
@property (nonatomic) CLLocationCoordinate2D coordinate;
@property (nonatomic, copy) NSString *title;
@property (nonatomic, copy) NSString *subtitle;

@property (copy, nonatomic) NSString *locationName;
@end
@implementation CDCalloutAnnotation

@end
/***********************************************************/
@protocol CDCalloutAnnotationViewDelegate <NSObject>
- (void)calloutViewTapAction;

@end
@interface CDCalloutAnnotationView : MKAnnotationView

@property (strong, nonatomic) UIImageView *bgIV;
@property (strong, nonatomic) UILabel *titleLabel;
@property (strong, nonatomic) UILabel *subTitleLabel;
@property (strong, nonatomic) UIImageView *naviIV;
@property (weak, nonatomic) id<CDCalloutAnnotationViewDelegate> delegate;
@end

@implementation CDCalloutAnnotationView

- (instancetype)initWithAnnotation:(id<MKAnnotation>)annotation reuseIdentifier:(NSString *)reuseIdentifier{
    self = [super initWithAnnotation:annotation reuseIdentifier:reuseIdentifier];
    if (self) {
        self.bounds = CGRectMake(0, 0, 255, 95);
        self.canShowCallout = NO;
        self.userInteractionEnabled = YES;
        [self layoutUI];
        [self.bgIV addGestureRecognizer:[[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(calloutViewTapAct)]];
    }
    return self;
}

- (void)layoutUI{
    [self addSubview:self.bgIV];
    [self.bgIV addSubview:self.titleLabel];
    [self.bgIV addSubview:self.subTitleLabel];
    [self.bgIV addSubview:self.naviIV];
    [self makeConstraints];
    
}

- (void)calloutViewTapAct{
    if ([self.delegate respondsToSelector:@selector(calloutViewTapAction)]) {
        [self.delegate calloutViewTapAction];
    }
}
//set data
- (void)setAnnotation:(id<MKAnnotation>)annotation{
    [super setAnnotation:annotation];
    CDCalloutAnnotation *ann = (CDCalloutAnnotation *)annotation;
    //self.titleLabel.text = ann.locationName;
    [WLKTCourseDetailMapVC getAddressByLatitude:ann.coordinate.latitude longitude:ann.coordinate.longitude completion:^(NSString *address, NSError *error) {
        if (!error) {
            self.subTitleLabel.text = address;
            CGSize size = [UILabel getSizeWithStr:address Width:185 Font:14];
            [self.subTitleLabel mas_updateConstraints:^(MASConstraintMaker *make) {
                make.size.mas_equalTo(size);
            }];
        }
    }];
    
}
#pragma mark - makeConstraints
- (void)makeConstraints{
    [self.titleLabel mas_makeConstraints:^(MASConstraintMaker *make) {
        make.size.mas_equalTo(CGSizeMake(210, 20));
        make.left.mas_equalTo(self.bgIV).offset(10);
        make.top.mas_equalTo(self.bgIV).offset(10);
    }];
    [self.subTitleLabel mas_makeConstraints:^(MASConstraintMaker *make) {
        make.size.mas_equalTo(CGSizeMake(185, 17));
        make.left.mas_equalTo(self.bgIV).offset(10);
        make.top.mas_equalTo(self.titleLabel.mas_bottom).offset(8);
    }];
    [self.naviIV mas_makeConstraints:^(MASConstraintMaker *make) {
        make.size.mas_equalTo(CGSizeMake(55, 28));
        make.centerY.mas_equalTo(self.bgIV);
        make.right.mas_equalTo(self.bgIV.mas_right).offset(-5);
    }];
}
#pragma mark - get
- (UIImageView *)bgIV{
    if (!_bgIV) {
        _bgIV = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, 255, 95)];
        _bgIV.image = [UIImage imageNamed:@"课程详情底板"];
        _bgIV.userInteractionEnabled = YES;
    }
    return _bgIV;
}
- (UILabel *)titleLabel{
    if (!_titleLabel) {
        _titleLabel = [UILabel new];
        _titleLabel.font = [UIFont systemFontOfSize:15 * ScreenRatio_6 weight:UIFontWeightSemibold];
        _titleLabel.textColor = UIColorHex(ffffff);
        _titleLabel.numberOfLines = 1;
    }
    return _titleLabel;
}
- (UILabel *)subTitleLabel{
    if (!_subTitleLabel) {
        _subTitleLabel = [UILabel new];
        _subTitleLabel.font = [UIFont systemFontOfSize:13 * ScreenRatio_6];
        _subTitleLabel.textColor = UIColorHex(ffffff);
        _subTitleLabel.numberOfLines = 2;
    }
    return _subTitleLabel;
}
- (UIImageView *)naviIV{
    if (!_naviIV) {
        _naviIV = [[UIImageView alloc]initWithImage:[UIImage imageNamed:@"导航按钮"]];
    }
    return _naviIV;
}

@end
/***********************************************************/
@interface WLKTCDMapViewController ()<CLLocationManagerDelegate, MKMapViewDelegate, CDCalloutAnnotationViewDelegate, UITableViewDelegate, UITableViewDataSource>
@property (strong, nonatomic) MKMapView *mapView;
@property (strong, nonatomic) WLKTExchangeButton *popoverBtn;
@property (strong, nonatomic) UITableView *popTableView;
@property (strong, nonatomic) UIButton *quanjingBtn;
@property (strong, nonatomic) UIButton *backButton;
/** 位置管理者 */
@property (nonatomic, strong) CLLocationManager *locationManager;
@property (strong, nonatomic) CLGeocoder *geocoder;

@property (nonatomic, assign) CLLocationCoordinate2D currentCoordinate;
@property (strong, nonatomic) CDPointAnnotation *pointAnn;
@property (strong, nonatomic) CDCalloutAnnotation *calloutAnn;

@end

@implementation WLKTCDMapViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor = [UIColor whiteColor];
    [self.view addSubview:self.mapView];
    [self.view addSubview:self.backButton];
    [self.view addSubview:self.quanjingBtn];
    [self.view addSubview:self.popoverBtn];
    [self makeConstraints];
    //启动跟踪定位
    [self.locationManager startUpdatingLocation];
    
}

- (void)setCurrentPoint:(WLKTCDDataPoint *)currentPoint{
    _currentPoint = currentPoint;
    [self.popoverBtn setTitle:[NSString stringWithFormat:@"%@  ", currentPoint.name] forState:UIControlStateNormal];
    
    self.quanjingBtn.hidden = currentPoint.vrurl.length < 1;
//    [self.mapView removeAllSubviews];
    //添加大头针
    [self addAnnotationWithAddress:currentPoint.address];
    
}

- (void)setData:(WLKTCDData *)data{
    _data = data;
    if (data.point.count > 1) {
        [self.popoverBtn setImage:[UIImage imageNamed:@"箭头下"] forState:UIControlStateNormal];
    }
}

- (void)makeConstraints{
    [self.backButton mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.mas_equalTo(self.view).offset(35 *ScreenRatio_6);
        make.left.mas_equalTo(self.view).offset(15 *ScreenRatio_6);
    }];
    [self.popoverBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.size.mas_equalTo(CGSizeMake(120 *ScreenRatio_6, 40 *ScreenRatio_6));
        make.right.mas_equalTo(self.view).offset(-10 *ScreenRatio_6);
        make.centerY.mas_equalTo(self.backButton);
    }];
    [self.quanjingBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.size.mas_equalTo(CGSizeMake(100 *ScreenRatio_6, 40 *ScreenRatio_6));
        make.centerX.mas_equalTo(self.view);
        make.bottom.mas_equalTo(self.view).offset(-15 *ScreenRatio_6);
    }];
}

#pragma mark - action
- (void)popoverBtnAct{
    if (self.data.point.count < 2) {
        return;
    }
    self.popoverBtn.layer.shadowOpacity = 0.0;
    [self.view addSubview:self.popTableView];
    [self.view bringSubviewToFront:self.popoverBtn];
    [self.popTableView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.width.left.mas_equalTo(self.popoverBtn);
        make.height.mas_equalTo(self.data.point.count * 35 *ScreenRatio_6);
    }];
}

- (void)quanjingBtnAct{
    WLKTCDVRPlayVC *vc = [[WLKTCDVRPlayVC alloc]init];
    vc.data = self.data;
    vc.currentPoint = self.currentPoint;
    UIViewController *v = self.presentingViewController;
    @weakify(v)
    [self dismissViewControllerAnimated:YES completion:^{
        @strongify(v)
        [v presentViewController:vc animated:YES completion:nil];
    }];
}

- (void)backButtonAct{
    [self dismissViewControllerAnimated:YES completion:nil];
}

#pragma mark - table view
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    return self.data.point.count;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    return 30 *ScreenRatio_6;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    WLKTCDMapSchoolListCell *cell = [[WLKTCDMapSchoolListCell alloc]init];
    cell.name = self.data.point[indexPath.row].name;
    
    cell.selectionStyle = UITableViewCellSelectionStyleNone;
    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    self.currentPoint = self.data.point[indexPath.row];
    self.popoverBtn.layer.shadowOpacity = 1.0;
    [tableView removeFromSuperview];
}

#pragma mark - CDCalloutAnnotationViewDelegate
- (void)calloutViewTapAction{
    [WLKTCourseDetailMapVC getAddressByLatitude:self.currentCoordinate.latitude longitude:self.currentCoordinate.longitude completion:^(NSString *address, NSError *error) {
        if (!error) {
            [self alertActionFrom:address to:self.currentPoint.address];
        }
    }];
}

#pragma mark - 添加大头针
-(void)addAnnotationWithAddress:(NSString *)address {
    //地理编码
    __block CLLocation *location;
    CLGeocoder *geocoder = [[CLGeocoder alloc]init];
    [geocoder geocodeAddressString:address completionHandler:^(NSArray *placemarks, NSError *error) {
        //取得第一个地标，地标中存储了详细的地址信息，注意：一个地名可能搜索出多个地址
        CLPlacemark *placemark = [placemarks firstObject];
        location = placemark.location;//位置
        
        //设定显示范围
        MKCoordinateSpan theSpan;
        theSpan.latitudeDelta = 0.1;
        theSpan.longitudeDelta = 0.1;
        //设置地图显示的中心及范围
        MKCoordinateRegion theRegion;
        theRegion.center = location.coordinate;
        theRegion.span = theSpan;
        [self.mapView setRegion:theRegion animated:YES];
        //设置大头针坐标
        self.pointAnn.coordinate = location.coordinate;
        [self.mapView addAnnotation:self.pointAnn];
        //详情视图
        self.calloutAnn.coordinate = location.coordinate;
        [self.mapView addAnnotation:self.calloutAnn];
        
        //[self.mapView setCenterCoordinate:location.coordinate animated:YES];
    }];
}

#pragma mark - map view
- (MKAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id<MKAnnotation>)annotation{
    if ([annotation isKindOfClass:[CDPointAnnotation class]]) {//大头针
        MKAnnotationView *annotationView = [mapView dequeueReusableAnnotationViewWithIdentifier:@"PinAnnotation"];
        if (annotationView == nil) {
            annotationView = [[MKAnnotationView alloc]initWithAnnotation:annotation reuseIdentifier:@"PinAnnotation"];
        }
        annotationView.annotation = annotation;
        annotationView.image = [UIImage imageNamed:@"课程详情学校定位"];
        annotationView.canShowCallout = NO;
        return annotationView;
    }
    else if ([annotation isKindOfClass:[CDCalloutAnnotation class]]){//弹出视图
        CDCalloutAnnotationView *v = (CDCalloutAnnotationView *)[mapView dequeueReusableAnnotationViewWithIdentifier:@"CDCalloutAnnotation"];
        if (v == nil) {
            v = [[CDCalloutAnnotationView alloc]initWithAnnotation:annotation reuseIdentifier:@"CDCalloutAnnotation"];
        }
        v.delegate = self;
        v.centerOffset = CGPointMake(4, -67);
        v.annotation = annotation;
        v.titleLabel.text = self.currentPoint.name;
        return v;
    }
    
    return nil;//当前用户位置默认视图
}

- (void)mapView:(MKMapView *)mapView regionWillChangeAnimated:(BOOL)animated{
    [self.popTableView removeFromSuperview];
}

#pragma mark - CoreLocation 代理
-(void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations{
    CLLocation *location = [locations firstObject];//取出第一个位置
    self.currentCoordinate = location.coordinate;//位置坐标
    MKCoordinateRegion region = MKCoordinateRegionMake(location.coordinate, MKCoordinateSpanMake(0.1, 0.1));//MKCoordinateRegionMakeWithDistance(location.coordinate, _span, _span);
    MKCoordinateRegion adjustedRegion = [self.mapView regionThatFits:region];
    [self.mapView setRegion:adjustedRegion animated:YES];
    //如果不需要实时定位，使用完即关闭定位服务
    [_locationManager stopUpdatingLocation];
}

#pragma mark - 导航
//设置线路遮蔽物（红色线条）宽度，颜色:MKPolylineRenderer
- (MKOverlayRenderer *)mapView:(MKMapView *)mapView rendererForOverlay:(id <MKOverlay>)overlay{
    MKPolylineRenderer *ployline = [[MKPolylineRenderer alloc]initWithOverlay:overlay];
    ployline.fillColor = [UIColor blueColor];
    ployline.strokeColor = [UIColor blueColor];
    ployline.lineWidth = 8.0;
    return ployline;
}

-(void)turnByTurnFrom:(NSString *)current to:(NSString *)destination {
    //根据“  ”地理编码
    [self.geocoder geocodeAddressString:current completionHandler:^(NSArray *placemarks, NSError *error) {
        CLPlacemark *clPlacemark1 = [placemarks firstObject];//获取第一个地标
        MKPlacemark *mkPlacemark1 = [[MKPlacemark alloc]initWithPlacemark:clPlacemark1];
        //注意地理编码一次只能定位到一个位置，不能同时定位，所在放到第一个位置定位完成回调函数中再次定位
        [self.geocoder geocodeAddressString:destination completionHandler:^(NSArray *placemarks, NSError *error) {
            CLPlacemark *clPlacemark2 = [placemarks firstObject];//获取第一个地标
            MKPlacemark *mkPlacemark2 = [[MKPlacemark alloc]initWithPlacemark:clPlacemark2];
            NSDictionary *options = @{MKLaunchOptionsMapTypeKey:@(MKMapTypeStandard),MKLaunchOptionsDirectionsModeKey:MKLaunchOptionsDirectionsModeDriving};
            //MKMapItem *mapItem1=[MKMapItem mapItemForCurrentLocation];//当前位置
            MKMapItem *mapItem1 = [[MKMapItem alloc]initWithPlacemark:mkPlacemark1];
            MKMapItem *mapItem2 = [[MKMapItem alloc]initWithPlacemark:mkPlacemark2];
            [MKMapItem openMapsWithItems:@[mapItem1, mapItem2] launchOptions:options];
            
        }];
    }];
}

- (void)alertActionFrom:(NSString *)current to:(NSString *)destination{
    UIAlertController *alert = [UIAlertController alertControllerWithTitle:nil message:nil preferredStyle:UIAlertControllerStyleActionSheet];
    //系统地图
    UIAlertAction *systemMap = [UIAlertAction actionWithTitle:@"苹果地图" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        [self turnByTurnFrom:current to:destination];
    }];
    [alert addAction:systemMap];
    //百度地图
    if ([[UIApplication sharedApplication] canOpenURL:[NSURL URLWithString:@"baidumap://"]]) {
        UIAlertAction *baiduMap = [UIAlertAction actionWithTitle:@"百度地图" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
            [WLKTCourseDetailMapVC getCoordinateByAddress:self.currentPoint.address completion:^(CLLocationCoordinate2D coordinate, NSError *error) {
                NSString *url = [[NSString stringWithFormat:@"baidumap://map/direction?origin={{我的位置}}&destination=latlng:%f,%f|name=目的地&mode=driving&coord_type=gcj02", coordinate.latitude, coordinate.longitude] stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLQueryAllowedCharacterSet]];
                [[UIApplication sharedApplication]openURL:[NSURL URLWithString:url]];
            }];
        }];
        [alert addAction:baiduMap];
    }
    UIAlertAction *cancel = [UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:nil];
    [alert addAction:cancel];
    [self presentViewController:alert animated:YES completion:nil];
}

#pragma mark - get
- (WLKTExchangeButton *)popoverBtn{
    if (!_popoverBtn) {
        _popoverBtn = [WLKTExchangeButton new];
        _popoverBtn.titleLabel.font = [UIFont systemFontOfSize:14 *ScreenRatio_6];
        _popoverBtn.titleLabel.numberOfLines = 1;
        [_popoverBtn setTitleColor:KMainTextColor_9 forState:UIControlStateNormal];
        _popoverBtn.layer.shadowColor = KMainTextColor_6.CGColor;
        _popoverBtn.layer.shadowOffset = CGSizeMake(1, 1);
        _popoverBtn.layer.shadowOpacity = 1.0;
        _popoverBtn.layer.cornerRadius = 20 *ScreenRatio_6;
        _popoverBtn.backgroundColor = [UIColor whiteColor];
        [_popoverBtn addTarget:self action:@selector(popoverBtnAct) forControlEvents:UIControlEventTouchUpInside];
    }
    return _popoverBtn;
}
- (UITableView *)popTableView{
    if (!_popTableView) {
        _popTableView = [[UITableView alloc]initWithFrame:CGRectNull style:UITableViewStylePlain];
        _popTableView.dataSource = self;
        _popTableView.delegate = self;
        _popTableView.backgroundColor = [UIColor whiteColor];
        _popTableView.showsVerticalScrollIndicator = false;
        _popTableView.separatorStyle = UITableViewCellSeparatorStyleNone;
        _popTableView.layer.cornerRadius = 20 *ScreenRatio_6;
        _popTableView.layer.masksToBounds = YES;
        UIView *v = [[UIView alloc]initWithFrame:CGRectMake(0, 0, 100 *ScreenRatio_6, 40 *ScreenRatio_6)];
        v.backgroundColor = [UIColor whiteColor];
        _popTableView.tableHeaderView = v;
    }
    return _popTableView;
}
- (UIButton *)quanjingBtn{
    if (!_quanjingBtn) {
        _quanjingBtn = [UIButton new];
        _quanjingBtn.titleLabel.font = [UIFont systemFontOfSize:16 *ScreenRatio_6];
        [_quanjingBtn setTitle:@"全景" forState:UIControlStateNormal];
        [_quanjingBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        _quanjingBtn.backgroundColor = UIColorHex(f6c447);
        _quanjingBtn.layer.cornerRadius = 20 *ScreenRatio_6;
        _quanjingBtn.layer.shadowColor = KMainTextColor_6.CGColor;
        _quanjingBtn.layer.shadowOffset = CGSizeMake(1, 1);
        _quanjingBtn.layer.shadowOpacity = 1.0;
        _quanjingBtn.hidden = YES;
        [_quanjingBtn addTarget:self action:@selector(quanjingBtnAct) forControlEvents:UIControlEventTouchUpInside];
    }
    return _quanjingBtn;
}
- (UIButton *)backButton{
    if (!_backButton) {
        _backButton = [UIButton new];
        [_backButton setImage:[UIImage imageNamed:@"返回"] forState:UIControlStateNormal];
        [_backButton addTarget:self action:@selector(backButtonAct) forControlEvents:UIControlEventTouchUpInside];
    }
    return _backButton;
}
- (CDPointAnnotation *)pointAnn{
    if (!_pointAnn) {
        _pointAnn = [[CDPointAnnotation alloc]init];
    }
    return _pointAnn;
}
- (CDCalloutAnnotation *)calloutAnn{
    if (!_calloutAnn) {
        _calloutAnn = [[CDCalloutAnnotation alloc]init];
    }
    return _calloutAnn;
}
- (CLLocationManager *)locationManager
{
    if (!_locationManager) {
        _locationManager = [[CLLocationManager alloc] init];
        // 版本适配
        if ([[UIDevice currentDevice].systemVersion floatValue] >= 8.0) {
            [_locationManager requestWhenInUseAuthorization];
        }
        //设置代理
        _locationManager.delegate = self;
        //设置定位精度
        _locationManager.desiredAccuracy = kCLLocationAccuracyBest;
        //定位频率,每隔多少米定位一次
        _locationManager.distanceFilter = 10.0;//十米定位一次
        
    }
    return _locationManager;
}
- (MKMapView *)mapView{
    if (!_mapView) {
        _mapView = [[MKMapView alloc]initWithFrame:CGRectMake(0, 0, ScreenWidth, ScreenHeight)];
        _mapView.mapType = MKMapTypeStandard;
        _mapView.delegate = self;
        _mapView.showsUserLocation = YES;
        // 指南针
        _mapView.showsCompass = YES;
        // 比例尺
        _mapView.showsScale = YES;
        // 交通
        _mapView.showsTraffic = YES;
        _mapView.userTrackingMode = MKUserTrackingModeFollowWithHeading;
        _mapView.rotateEnabled = NO;
    }
    return _mapView;
}
- (CLGeocoder *)geocoder{
    if (!_geocoder) {
        _geocoder = [[CLGeocoder alloc]init];
    }
    return _geocoder;
}

@end

